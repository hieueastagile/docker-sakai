# fig file
# This sets up WebLearn(Sakai) for a developer, so it runs with the debugger enabled and shouldn't allocate as much
# resources as we use in production.
# It exposes the webserver publicly, but all the developer services (mysql, debug port, jmx) just on localhost.
#
app:
  build: ../tomcat
  # If you want to test the production image swap the previous line with this one.
  # image: sakaiproject/sakai



  # Not too sure about this as there seem to be IO errors with using volumes like
  # this, eg corrupt files and missing files.
  # We use the sakai.properties from the production build
  volumes:
   - /opt/tomcat/sakai/files
   - /opt/tomcat/sakai/deleted
  command: /opt/tomcat/bin/catalina.sh jpda run

# If you want to use docker-compose scale on the app it should work, but you will need to
# have docker pick random ports and so change all these lines to be just a single
# port number.
  ports:
   - "8080:8080"
   - "127.0.0.1:8000:8000"
   - "127.0.0.1:8009:8009"
   - "127.0.0.1:5400:5400"
   - "127.0.0.1:8025:8025"

# We're using our own image so that we can set the default character encoding.
# The standard MySQL image doesn't allow this.
# The standard dockerfile/mysql image doesn't allow autocation of user/db
db:
  image: mysql:5.6.27
  environment:
    MYSQL_ROOT_PASSWORD: 
    MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    MYSQL_USER: sakai
    MYSQL_PASSWORD: sakai
    MYSQL_DATABASE: sakai
  command:
   - --character-set-server=utf8
  # We expose the port so that clients outside docker can connect
  ports:
   - "127.0.0.1:3306:3306"
